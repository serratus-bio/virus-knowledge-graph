# Reference: https://github.com/neo4j-partners/amazon-cloud-formation-neo4j/blob/main/marketplace/neo4j-community/neo4j.template.yaml

AWSTemplateFormatVersion: "2010-09-09"
Description: Neo4j 5 Community Edition
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Neo4j Configuration"
        Parameters:
          - Password
          - IsMLWorker
      - Label:
          default: "Infrastructure Configuration"
        Parameters:
          - InstanceType
          - DiskSize
          - SSHCIDR
    ParameterLabels:
      Password:
        default: Password
      InstanceType:
        default: Instance Type
      DiskSize:
        default: Disk Size
      SSHCIDR:
        default: SSH CIDR
      IsMLWorker:
        default: Uses ML config and plugins (install GDS, limit page cache)

Parameters:
  Password:
    Description: Password for Neo4j
    Type: String
    MinLength: 8
    NoEcho: true

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - r6i.large
      - r6i.xlarge
      - r6i.2xlarge
      - r6i.4xlarge
      - r6i.8xlarge
      - r6i.12xlarge
      - r6i.16xlarge
      - r6i.24xlarge
      - r6i.32xlarge

  DiskSize:
    Description: Size in GB of the EBS volume on each node
    Type: Number
    Default: 30
    MinValue: 30
    ConstraintDescription: "Minimum disk size should be 30"

  SSHCIDR:
    Description: SSH CIDR (Specify an address range from which ec2 instances are accessible on port 22. You can use 0.0.0.0/0 to allow access from any IP address)
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid CIDR range of the form x.x.x.x/x."

  IsMLWorker:
    Description: Use ML config and plugins (install GDS, limit page cache)
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"

  KeyName:
    Description: EC2 KeyPair to enable SSH access to the instance
    Type: "AWS::EC2::KeyPair::KeyName"

Resources:
  Neo4jVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: StackID
          Value: !Ref "AWS::StackId"
        - Key: Name
          Value: !Ref "AWS::StackName"

  Neo4jSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: StackID
          Value: !Ref "AWS::StackId"
        - Key: Name
          Value: !Ref "AWS::StackName"
      VpcId: !Ref Neo4jVPC

  Neo4jRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: StackID
          Value: !Ref "AWS::StackId"
        - Key: Name
          Value: !Ref "AWS::StackName"
      VpcId: !Ref Neo4jVPC

  Neo4jRoute:
    Type: AWS::EC2::Route
    Properties:
      GatewayId: !Ref Neo4jInternetGateway
      RouteTableId: !Ref Neo4jRouteTable
      DestinationCidrBlock: 0.0.0.0/0

  Neo4jSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Neo4jRouteTable
      SubnetId: !Ref Neo4jSubnet

  Neo4jInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: StackID
          Value: !Ref "AWS::StackId"
        - Key: Name
          Value: !Ref "AWS::StackName"

  Neo4jInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref Neo4jInternetGateway
      VpcId: !Ref Neo4jVPC

  Neo4jSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and Neo4j External Ports
      VpcId: !Ref Neo4jVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHCIDR
        - IpProtocol: tcp
          FromPort: 7474
          ToPort: 7474
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 7687
          ToPort: 7687
          CidrIp: 0.0.0.0/0

  Neo4jElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  Neo4jIPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      EIP: !Ref Neo4jElasticIP
      InstanceId: !Ref Neo4jEC2Instance

  Neo4jEC2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
        Count: 1
    Properties:
      SubnetId: !Ref Neo4jSubnet
      ImageId: !FindInMap
        - Neo4j
        - !Ref "AWS::Region"
        - BYOL
      InstanceType:
        Ref: InstanceType
      SecurityGroupIds:
        - Fn::GetAtt: [Neo4jSecurityGroup, GroupId]
      EbsOptimized: true
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize:
              Ref: DiskSize
            VolumeType: gp3
            Encrypted: true
      KeyName:
        Ref: KeyName
      UserData:
        Fn::Base64: !Join
          - ""
          - - "#!/bin/bash\n"
            - "set -euo pipefail\n"
            - "echo Running startup script...\n"

            - 'password="'
            - Ref: Password
            - "\"\n"

            - "stackName="
            - Ref: AWS::StackName
            - "\n"

            - "region="
            - Ref: AWS::Region
            - "\n"

            - "isMLWorker="
            - Ref: IsMLWorker
            - "\n"

            - "elasticIp="
            - Ref: Neo4jElasticIP
            - "\n"

            - "install_neo4j_from_yum() {\n"
            - "  echo \"Installing Graph Database...\"\n"
            - "   PACKAGE_VERSION=$(curl --fail http://versions.neo4j-templates.com/target.json | jq -r '.aws.\"5\"' || echo \"\")\n"
            - "      if [[ ! -z $PACKAGE_VERSION && $PACKAGE_VERSION != \"null\" ]]; then\n"
            - "        echo \"Found PACKAGE_VERSION from http://versions.neo4j-templates.com : PACKAGE_VERSION=$PACKAGE_VERSION\"\n"
            - "        NEO4J_YUM_PACKAGE=\"neo4j-$PACKAGE_VERSION\"\n"
            - "      else\n"
            - "        echo 'Failed to resolve Neo4j version from http://versions.neo4j-templates.com, using PACKAGE_VERSION=latest'\n"
            - "        PACKAGE_VERSION=\"latest\"\n"
            - "        NEO4J_YUM_PACKAGE='neo4j-enterprise'\n"
            - "      fi\n"
            - "    yum -y install \"${NEO4J_YUM_PACKAGE}\"\n"
            - "    yum update -y aws-cfn-bootstrap\n"
            - "    systemctl enable neo4j\n"
            - "    if [[ \"$PACKAGE_VERSION\" == \"latest\" ]]; then\n"
            - "      PACKAGE_VERSION=$(/usr/share/neo4j/bin/neo4j --version)\n"
            - "    fi\n"
            - "}\n"

            - "install_apoc_plugin() {\n"
            - "  echo \"Installing APOC...\"\n"
            - "  mv /var/lib/neo4j/labs/apoc-*-core.jar /var/lib/neo4j/plugins\n"
            - "}\n"

            - "extension_config() {\n"
            - "  echo \"Configuring extensions and security in neo4j.conf...\"\n"
            - "  sed -i s~#server.unmanaged_extension_classes=org.neo4j.examples.server.unmanaged=/examples/unmanaged~server.unmanaged_extension_classes=com.neo4j.bloom.server=/bloom,semantics.extension=/rdf~g /etc/neo4j/neo4j.conf\n"
            - "  sed -i s/#dbms.security.procedures.unrestricted=my.extensions.example,my.procedures.*/dbms.security.procedures.unrestricted=gds.*,apoc.*,bloom.*/g /etc/neo4j/neo4j.conf\n"
            - "  echo \"dbms.security.http_auth_allowlist=/,/browser.*,/bloom.*\" >> /etc/neo4j/neo4j.conf\n"
            - "  echo \"dbms.security.procedures.allowlist=apoc.*,gds.*,bloom.*\" >> /etc/neo4j/neo4j.conf\n"
            - "}\n"

            - "build_neo4j_conf_file() {\n"
            - "  privateIP=\"$(hostname -i | awk '{print $NF}')\"\n"
            - "  publicIP=\"${elasticIp}\"\n"
            - "  echo \"Configuring network in neo4j.conf...\"\n"
            - "  sed -i 's/#server.default_listen_address=0.0.0.0/server.default_listen_address=0.0.0.0/g' /etc/neo4j/neo4j.conf\n"
            - "  sed -i s/#server.default_advertised_address=localhost/server.default_advertised_address=\"${publicIP}\"/g /etc/neo4j/neo4j.conf\n"
            - "  sed -i s/#server.discovery.advertised_address=:5000/server.discovery.advertised_address=\"${privateIP}\":5000/g /etc/neo4j/neo4j.conf\n"
            - "  sed -i s/#server.routing.advertised_address=:7688/server.routing.advertised_address=\"${privateIP}\":7688/g /etc/neo4j/neo4j.conf\n"
            - "  sed -i s/#server.discovery.listen_address=:5000/server.discovery.listen_address=\"${privateIP}\":5000/g /etc/neo4j/neo4j.conf\n"
            - "  sed -i s/#server.routing.listen_address=0.0.0.0:7688/server.routing.listen_address=\"${privateIP}\":7688/g /etc/neo4j/neo4j.conf\n"
            - "  sed -i s/#server.bolt.listen_address=:7687/server.bolt.listen_address=\"${privateIP}\":7687/g /etc/neo4j/neo4j.conf\n"
            - "  sed -i s/#server.bolt.advertised_address=:7687/server.bolt.advertised_address=\"${publicIP}\":7687/g /etc/neo4j/neo4j.conf\n"
            - "  echo \"internal.dbms.cypher_ip_blocklist=10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,169.254.169.0/24,fc00::/7,fe80::/10,ff00::/8\" >> /etc/neo4j/neo4j.conf\n"
            - "  echo \"internal.dbms.tx_log.fail_on_corrupted_log_files=false\" >> /etc/neo4j/neo4j.conf\n"
            - "  neo4j-admin server memory-recommendation | grep -v ^# >> /etc/neo4j/neo4j.conf\n"
            - "}\n"

            - "configure_ml_worker() {\n"
            - "  if [[ \"${isMLWorker}\" == Yes ]]; then\n"
            - "    echo \"Installing Graph Data Science...\"\n"
            - "    NEO4J_VERSION=$(curl --fail http://versions.neo4j-templates.com/target.json | jq -r '.aws.\"5\"' || echo \"\")\n"
            - "    GDS_VERSION=$(curl --fail https://graphdatascience.ninja/versions.json |  jq -r --arg pkg_version \"$NEO4J_VERSION\" '.[] | select(.neo4j == $pkg_version) | .version' || echo \"\")\n"
            - "    wget \"https://graphdatascience.ninja/neo4j-graph-data-science-$GDS_VERSION.zip\" -P /tmp/ \n"
            - "    unzip /tmp/neo4j-graph-data-science-*.zip  -d /var/lib/neo4j/plugins \n"
            - "    echo \"Disable page cache requirements\"\n"
            - "    sed -i s/server.memory.pagecache.size=10g/#server.memory.pagecache.size=10g/g /etc/neo4j/neo4j.conf\n"
            - "  fi\n"
            - "}\n"

            - "configure_read_server() {\n"
            - "  if [[ \"${isMLWorker}\" == No ]]; then\n"
            - "    echo \"Enable read-only mode\"\n"
            - "    echo \"server.databases.default_to_read_only=true\" >> /etc/neo4j/neo4j.conf\n"
            - "  fi\n"
            - "}\n"

            - "start_neo4j() {\n"
            - "  echo \"Starting Neo4j...\"\n"
            - "  systemctl start neo4j\n"
            - "  neo4j-admin dbms set-initial-password \"${password}\"\n"
            - "  while [[ \"$(curl -s -o /dev/null -m 3 -L -w '%{http_code}' http://localhost:7474 )\" != \"200\" ]];\n"
            - "    do echo \"Waiting for neo4j to start\"\n"
            - "    sleep 5\n"
            - "  done\n"
            - "}\n"

            - "install_neo4j_from_yum\n"
            - "install_apoc_plugin\n"
            - "extension_config\n"
            - "build_neo4j_conf_file\n"
            - "configure_ml_worker\n"
            - "configure_read_server\n"
            - "start_neo4j && /opt/aws/bin/cfn-signal -e $? --stack \"${stackName}\" --resource Neo4jEC2Instance --region \"${region}\"\n"

Outputs:
  Neo4jBrowserURL:
    Description: URL for Neo4j Browser
    Value: !Join
      - ""
      - - "http://"
        - Ref: Neo4jElasticIP
        - ":"
        - "7474"
  Neo4jURI:
    Description: Neo4j URI Scheme
    Value: !Join
      - ""
      - - "neo4j://"
        - Ref: Neo4jElasticIP
        - ":"
        - "7687"
  Neo4jUsername:
    Description: Username for Neo4j
    Value: "The username is neo4j.  The password is what you provided to the template."

Mappings:
  Neo4j:
    us-east-1:
      BYOL: ami-0c294e345e6805dcb
    us-east-2:
      BYOL: ami-05038a3e125b7df3a
    us-west-1:
      BYOL: ami-0e7a8a9679c1817a4
    us-west-2:
      BYOL: ami-074ed489538b51da8
    ca-central-1:
      BYOL: ami-075db64eda038f82b
    eu-central-1:
      BYOL: ami-09092d35db718b055
    eu-central-2:
      BYOL: ami-071377daae60922e4
    eu-west-1:
      BYOL: ami-09d676e4307830d70
    eu-west-2:
      BYOL: ami-06a2a429e87a20a68
    eu-west-3:
      BYOL: ami-08bcfa52773db1fd2
    eu-north-1:
      BYOL: ami-0af96f237767c5428
    eu-south-1:
      BYOL: ami-041b66543f0d5324f
    eu-south-2:
      BYOL: ami-0f87bb9592598b8fa
    af-south-1:
      BYOL: ami-083480c3dae18a181
    ap-southeast-1:
      BYOL: ami-005032ae22c5801c4
    ap-southeast-2:
      BYOL: ami-0e4d0d9fb74ea6009
    ap-southeast-3:
      BYOL: ami-0c59b8250f5c7237b
    ap-south-1:
      BYOL: ami-06642bc1142715002
    ap-south-2:
      BYOL: ami-09f9dade53df2417b
    ap-northeast-1:
      BYOL: ami-0c857a14024f4d313
    ap-northeast-2:
      BYOL: ami-06543f53c2a96d279
    ap-northeast-3:
      BYOL: ami-077f21674a6caf3c0
    ap-east-1:
      BYOL: ami-0a04bba840b8d23ce
    sa-east-1:
      BYOL: ami-0df67ac1d3e5ee0f7
    me-south-1:
      BYOL: ami-0de2a901625c4f706
    me-central-1:
      BYOL: ami-0b479b11eef88207f
    us-gov-east-1:
      BYOL: ami-096e06a1d110c087a
    us-gov-west-1:
      BYOL: ami-083245c5a432d6e78
